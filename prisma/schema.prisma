generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model address {
  id        Int      @id @default(autoincrement())
  zipCode   String   @map("cep")
  state     String   @map("estado")
  city      String   @map("cidade")
  district  String   @map("bairro")
  street    String   @map("rua")
  number    Int      @map("numero")
  createdAt DateTime @default(now()) @map("criado_em")
  updatedAt DateTime @updatedAt @map("atualizado_em")

  users user[]
  units unit[]

  @@map("endereco")
}

model user {
  id        Int       @id @default(autoincrement())
  addressId Int?      @map("endereco_id")
  name      String    @map("nome")
  email     String    @unique @map("email")
  password  String    @map("senha")
  document  String?   @map("cpf")
  phone     String?   @map("telefone")
  birthdate DateTime? @map("data_nascimento")
  role      String    @map("tipo")
  specialty String?   @map("especialidade")
  createdAt DateTime  @default(now()) @map("criado_em")
  updatedAt DateTime  @updatedAt @map("atualizado_em")

  address                  address?      @relation(fields: [addressId], references: [id])
  patientAppointments      appointment[] @relation("PatientAppointments")
  professionalAppointments appointment[] @relation("ProfessionalAppointments")
  notifications            notification[] @relation("UserNotifications")
  professionalSchedules    professional_schedule[]

  @@map("usuario")
}

model professional_schedule {
  id             Int      @id @default(autoincrement())
  unitId         Int      @map("unidade_id")
  professionalId Int      @map("profissional_id")
  dayOfWeek      Int      @map("dia_semana") // 0 = Domingo, 6 = Sábado
  start          DateTime @db.Time @map("inicio")
  end            DateTime @db.Time @map("fim")
  createdAt      DateTime @default(now()) @map("criado_em")
  updatedAt      DateTime @updatedAt @map("atualizado_em")

  unit         unit @relation(fields: [unitId], references: [id])
  professional user @relation(fields: [professionalId], references: [id])

  @@map("profissional_escala")
}

model unit {
  id        Int      @id @default(autoincrement())
  addressId Int?     @map("endereco_id")
  name      String   @map("nome")
  phone     String   @map("telefone")
  distance  String   @map("distancia")
  createdAt DateTime @default(now()) @map("criado_em")
  updatedAt DateTime @updatedAt @map("atualizado_em")

  address      address?      @relation(fields: [addressId], references: [id])
  appointments appointment[]
  professionalSchedules professional_schedule[]
  unitSchedules        unit_schedule[]

  @@map("unidade")
}

model unit_schedule {
  id          Int      @id @default(autoincrement())
  unitId      Int      @map("unidade_id")
  dayOfWeek   Int      @map("dia_semana") // 0 = Domingo, 6 = Sábado
  opening     DateTime @db.Time @map("inicio")
  closing     DateTime @db.Time @map("fim")
  createdAt   DateTime @default(now()) @map("criado_em")
  updatedAt   DateTime @updatedAt @map("atualizado_em")

  unit unit @relation(fields: [unitId], references: [id])

  @@map("unidade_funcionamento")
}

model diagnosis {
  id            Int      @id @default(autoincrement())
  description   String   @map("descricao")
  appointmentId Int      @map("agendamento_id")
  createdAt     DateTime @default(now()) @map("criado_em")
  updatedAt     DateTime @updatedAt @map("atualizado_em")

  appointment appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)

  @@map("diagnostico")
}

model prescription {
  id            Int      @id @default(autoincrement())
  name          String   @map("nome")
  dosage        String   @map("dosagem")
  frequency     String   @map("frequencia")
  duration      String   @map("duracao")
  appointmentId Int      @map("agendamento_id")
  createdAt     DateTime @default(now()) @map("criado_em")
  updatedAt     DateTime @updatedAt @map("atualizado_em")

  appointment appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)

  @@map("receita")
}

model appointment {
  id             Int      @id @default(autoincrement())
  unitId         Int      @map("unidade_id")
  professionalId Int      @map("medico_id")
  patientId      Int      @map("paciente_id")
  status         String   @default("scheduled") @map("status")
  scheduledFor   DateTime @map("data")
  scheduledAt    DateTime @default(now()) @map("agendado_em")
  complaints     String[] @default([]) @map("queixas")
  createdAt      DateTime @default(now()) @map("criado_em")
  updatedAt      DateTime @updatedAt @map("atualizado_em")

  unit          unit           @relation(fields: [unitId], references: [id])
  professional  user           @relation("ProfessionalAppointments", fields: [professionalId], references: [id])
  patient       user           @relation("PatientAppointments", fields: [patientId], references: [id])
  diagnoses     diagnosis[]
  prescriptions prescription[]

  @@map("agendamento")
}

model notification {
  id        Int       @id @default(autoincrement())
  userId    Int       @map("user_id")
  title     String
  content   String
  metadata  Json?
  createdAt DateTime  @default(now()) @map("criado_em")
  updatedAt DateTime  @updatedAt @map("atualizado_em")
  readAt    DateTime? @map("lido_em") 

  user user @relation("UserNotifications", fields: [userId], references: [id])

  @@map("notificacao")
}